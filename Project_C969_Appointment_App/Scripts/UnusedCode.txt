----------------------------------------------------------------------------------------------------


        public static int AutoGenerateCityID(string cityName, string countryName)
        {
            int cityId;
            int countryId;

            try
            {
                using (var connection = new MySqlConnection(DatabaseConnection.connectionString))
                {
                    connection.Open();

                    // Check if the city already exists
                    string cityQuery = "SELECT cityId, countryId FROM city WHERE city = @CityName LIMIT 1";
                    using (var cityCommand = new MySqlCommand(cityQuery, connection))
                    {
                        cityCommand.Parameters.AddWithValue("@CityName", cityName);
                        using (var reader = cityCommand.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                // City exists, return its cityId
                                cityId = reader.GetInt32("cityId");
                                return cityId;
                            }
                        }
                    }

                    // City does not exist, handle the country
                    string countryQuery = "SELECT countryId FROM country WHERE country = @CountryName LIMIT 1";
                    using (var countryCommand = new MySqlCommand(countryQuery, connection))
                    {
                        countryCommand.Parameters.AddWithValue("@CountryName", countryName);
                        var result = countryCommand.ExecuteScalar();

                        if (result != null)
                        {
                            // Country exists, use the existing countryId
                            countryId = Convert.ToInt32(result);
                        }
                        else
                        {
                            // Country does not exist, generate a new countryId
                            string maxCountryIdQuery = "SELECT MAX(countryId) FROM country";
                            using (var maxCountryCommand = new MySqlCommand(maxCountryIdQuery, connection))
                            {
                                var maxIdResult = maxCountryCommand.ExecuteScalar();
                                countryId = maxIdResult != DBNull.Value ? Convert.ToInt32(maxIdResult) + 1 : 1;
                            }

                            // Insert the new country
                            string insertCountryQuery = "INSERT INTO country (countryId, country, createDate, createdBy, lastUpdate, lastUpdateBy) " +
                                                        "VALUES (@CountryId, @CountryName, @CreateDate, @CreatedBy, @LastUpdate, @LastUpdateBy)";
                            using (var insertCountryCommand = new MySqlCommand(insertCountryQuery, connection))
                            {
                                insertCountryCommand.Parameters.AddWithValue("@CountryId", countryId);
                                insertCountryCommand.Parameters.AddWithValue("@CountryName", countryName);
                                insertCountryCommand.Parameters.AddWithValue("@CreateDate", DateTime.Now);
                                insertCountryCommand.Parameters.AddWithValue("@CreatedBy", "System");
                                insertCountryCommand.Parameters.AddWithValue("@LastUpdate", DateTime.Now);
                                insertCountryCommand.Parameters.AddWithValue("@LastUpdateBy", "System");
                                insertCountryCommand.ExecuteNonQuery();
                            }
                        }
                    }

                    // Generate a new cityId
                    string maxCityIdQuery = "SELECT MAX(cityId) FROM city";
                    using (var maxCityCommand = new MySqlCommand(maxCityIdQuery, connection))
                    {
                        var maxIdResult = maxCityCommand.ExecuteScalar();
                        cityId = maxIdResult != DBNull.Value ? Convert.ToInt32(maxIdResult) + 1 : 1;
                    }

                    // Insert the new city
                    string insertCityQuery = "INSERT INTO city (cityId, city, countryId, createDate, createdBy, lastUpdate, lastUpdateBy) " +
                                             "VALUES (@CityId, @CityName, @CountryId, @CreateDate, @CreatedBy, @LastUpdate, @LastUpdateBy)";
                    using (var insertCityCommand = new MySqlCommand(insertCityQuery, connection))
                    {
                        insertCityCommand.Parameters.AddWithValue("@CityId", cityId);
                        insertCityCommand.Parameters.AddWithValue("@CityName", cityName);
                        insertCityCommand.Parameters.AddWithValue("@CountryId", countryId);
                        insertCityCommand.Parameters.AddWithValue("@CreateDate", DateTime.Now);
                        insertCityCommand.Parameters.AddWithValue("@CreatedBy", "System");
                        insertCityCommand.Parameters.AddWithValue("@LastUpdate", DateTime.Now);
                        insertCityCommand.Parameters.AddWithValue("@LastUpdateBy", "System");
                        insertCityCommand.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error generating city ID: {ex.Message}");
                return -1; // Return an invalid ID in case of an error
            }

            return cityId;
        }


----------------------------------------------------------------------------------------------------



public static List<Customer> GetCustomers()  //TOOD MAYBE USE THIS LIST RATHER THAN BINDINGLIST
        {
            string query = "SELECT * FROM customer";
            var customers = new List<Customer>();

            using (var connection = new MySqlConnection(DatabaseConnection.connectionString))
            using (var command = new MySqlCommand(query, connection))
            {
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        customers.Add(new Customer(
                            reader.GetInt32("customerId"),
                            reader.GetString("customerName"),
                            reader.GetInt32("addressId"),
                            reader.GetBoolean("active"),
                            reader.GetDateTime("createDate"),
                            reader.GetString("createdBy"),
                            reader.GetDateTime("lastUpdate"),
                            reader.GetString("lastUpdateBy")
                        ));
                    }
                }
            }

            return customers;
        }


----------------------------------------------------------------------------------------------------



        //NOTE TO SELF: In simple terms...
        //ExecuteNonQuery(): Sends data to the database, but does not return it. Good for INSERT, UPDATE, DELETE
        //ExecuteReader(): Returns a "Set" of data from the database. Good for SELECT
        //ExecuteScalar(): Returns a returns the first column of the first row single value from the database. Good for SELECT